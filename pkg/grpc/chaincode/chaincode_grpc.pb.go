// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package chaincode

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// FabricChaincodeClient is the client API for FabricChaincode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FabricChaincodeClient interface {
	Up(ctx context.Context, in *ChaincodeRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type fabricChaincodeClient struct {
	cc grpc.ClientConnInterface
}

func NewFabricChaincodeClient(cc grpc.ClientConnInterface) FabricChaincodeClient {
	return &fabricChaincodeClient{cc}
}

func (c *fabricChaincodeClient) Up(ctx context.Context, in *ChaincodeRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/chaincode.FabricChaincode/Up", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FabricChaincodeServer is the server API for FabricChaincode service.
// All implementations must embed UnimplementedFabricChaincodeServer
// for forward compatibility
type FabricChaincodeServer interface {
	Up(context.Context, *ChaincodeRequest) (*EmptyResponse, error)
	mustEmbedUnimplementedFabricChaincodeServer()
}

// UnimplementedFabricChaincodeServer must be embedded to have forward compatible implementations.
type UnimplementedFabricChaincodeServer struct {
}

func (UnimplementedFabricChaincodeServer) Up(context.Context, *ChaincodeRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Up not implemented")
}
func (UnimplementedFabricChaincodeServer) mustEmbedUnimplementedFabricChaincodeServer() {}

// UnsafeFabricChaincodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FabricChaincodeServer will
// result in compilation errors.
type UnsafeFabricChaincodeServer interface {
	mustEmbedUnimplementedFabricChaincodeServer()
}

func RegisterFabricChaincodeServer(s grpc.ServiceRegistrar, srv FabricChaincodeServer) {
	s.RegisterService(&_FabricChaincode_serviceDesc, srv)
}

func _FabricChaincode_Up_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChaincodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FabricChaincodeServer).Up(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chaincode.FabricChaincode/Up",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FabricChaincodeServer).Up(ctx, req.(*ChaincodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FabricChaincode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chaincode.FabricChaincode",
	HandlerType: (*FabricChaincodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Up",
			Handler:    _FabricChaincode_Up_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chaincode.proto",
}
